// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"whisprite/model"
)

func newCounter(db *gorm.DB, opts ...gen.DOOption) counter {
	_counter := counter{}

	_counter.counterDo.UseDB(db, opts...)
	_counter.counterDo.UseModel(&model.Counter{})

	tableName := _counter.counterDo.TableName()
	_counter.ALL = field.NewAsterisk(tableName)
	_counter.ID = field.NewUint(tableName, "id")
	_counter.CreatedAt = field.NewTime(tableName, "created_at")
	_counter.UpdatedAt = field.NewTime(tableName, "updated_at")
	_counter.DeletedAt = field.NewField(tableName, "deleted_at")
	_counter.Name = field.NewString(tableName, "name")
	_counter.Value = field.NewUint64(tableName, "value")
	_counter.Contributions = counterHasManyContributions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Contributions", "model.CounterContribution"),
	}

	_counter.fillFieldMap()

	return _counter
}

type counter struct {
	counterDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Name          field.String
	Value         field.Uint64
	Contributions counterHasManyContributions

	fieldMap map[string]field.Expr
}

func (c counter) Table(newTableName string) *counter {
	c.counterDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c counter) As(alias string) *counter {
	c.counterDo.DO = *(c.counterDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *counter) updateTableName(table string) *counter {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Name = field.NewString(table, "name")
	c.Value = field.NewUint64(table, "value")

	c.fillFieldMap()

	return c
}

func (c *counter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *counter) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["value"] = c.Value

}

func (c counter) clone(db *gorm.DB) counter {
	c.counterDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c counter) replaceDB(db *gorm.DB) counter {
	c.counterDo.ReplaceDB(db)
	return c
}

type counterHasManyContributions struct {
	db *gorm.DB

	field.RelationField
}

func (a counterHasManyContributions) Where(conds ...field.Expr) *counterHasManyContributions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a counterHasManyContributions) WithContext(ctx context.Context) *counterHasManyContributions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a counterHasManyContributions) Model(m *model.Counter) *counterHasManyContributionsTx {
	return &counterHasManyContributionsTx{a.db.Model(m).Association(a.Name())}
}

type counterHasManyContributionsTx struct{ tx *gorm.Association }

func (a counterHasManyContributionsTx) Find() (result []*model.CounterContribution, err error) {
	return result, a.tx.Find(&result)
}

func (a counterHasManyContributionsTx) Append(values ...*model.CounterContribution) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a counterHasManyContributionsTx) Replace(values ...*model.CounterContribution) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a counterHasManyContributionsTx) Delete(values ...*model.CounterContribution) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a counterHasManyContributionsTx) Clear() error {
	return a.tx.Clear()
}

func (a counterHasManyContributionsTx) Count() int64 {
	return a.tx.Count()
}

type counterDo struct{ gen.DO }

type ICounterDo interface {
	gen.SubQuery
	Debug() ICounterDo
	WithContext(ctx context.Context) ICounterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICounterDo
	WriteDB() ICounterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICounterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICounterDo
	Not(conds ...gen.Condition) ICounterDo
	Or(conds ...gen.Condition) ICounterDo
	Select(conds ...field.Expr) ICounterDo
	Where(conds ...gen.Condition) ICounterDo
	Order(conds ...field.Expr) ICounterDo
	Distinct(cols ...field.Expr) ICounterDo
	Omit(cols ...field.Expr) ICounterDo
	Join(table schema.Tabler, on ...field.Expr) ICounterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICounterDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICounterDo
	Group(cols ...field.Expr) ICounterDo
	Having(conds ...gen.Condition) ICounterDo
	Limit(limit int) ICounterDo
	Offset(offset int) ICounterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICounterDo
	Unscoped() ICounterDo
	Create(values ...*model.Counter) error
	CreateInBatches(values []*model.Counter, batchSize int) error
	Save(values ...*model.Counter) error
	First() (*model.Counter, error)
	Take() (*model.Counter, error)
	Last() (*model.Counter, error)
	Find() ([]*model.Counter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Counter, err error)
	FindInBatches(result *[]*model.Counter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Counter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICounterDo
	Assign(attrs ...field.AssignExpr) ICounterDo
	Joins(fields ...field.RelationField) ICounterDo
	Preload(fields ...field.RelationField) ICounterDo
	FirstOrInit() (*model.Counter, error)
	FirstOrCreate() (*model.Counter, error)
	FindByPage(offset int, limit int) (result []*model.Counter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICounterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c counterDo) Debug() ICounterDo {
	return c.withDO(c.DO.Debug())
}

func (c counterDo) WithContext(ctx context.Context) ICounterDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c counterDo) ReadDB() ICounterDo {
	return c.Clauses(dbresolver.Read)
}

func (c counterDo) WriteDB() ICounterDo {
	return c.Clauses(dbresolver.Write)
}

func (c counterDo) Session(config *gorm.Session) ICounterDo {
	return c.withDO(c.DO.Session(config))
}

func (c counterDo) Clauses(conds ...clause.Expression) ICounterDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c counterDo) Returning(value interface{}, columns ...string) ICounterDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c counterDo) Not(conds ...gen.Condition) ICounterDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c counterDo) Or(conds ...gen.Condition) ICounterDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c counterDo) Select(conds ...field.Expr) ICounterDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c counterDo) Where(conds ...gen.Condition) ICounterDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c counterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICounterDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c counterDo) Order(conds ...field.Expr) ICounterDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c counterDo) Distinct(cols ...field.Expr) ICounterDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c counterDo) Omit(cols ...field.Expr) ICounterDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c counterDo) Join(table schema.Tabler, on ...field.Expr) ICounterDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c counterDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICounterDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c counterDo) RightJoin(table schema.Tabler, on ...field.Expr) ICounterDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c counterDo) Group(cols ...field.Expr) ICounterDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c counterDo) Having(conds ...gen.Condition) ICounterDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c counterDo) Limit(limit int) ICounterDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c counterDo) Offset(offset int) ICounterDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c counterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICounterDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c counterDo) Unscoped() ICounterDo {
	return c.withDO(c.DO.Unscoped())
}

func (c counterDo) Create(values ...*model.Counter) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c counterDo) CreateInBatches(values []*model.Counter, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c counterDo) Save(values ...*model.Counter) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c counterDo) First() (*model.Counter, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Counter), nil
	}
}

func (c counterDo) Take() (*model.Counter, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Counter), nil
	}
}

func (c counterDo) Last() (*model.Counter, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Counter), nil
	}
}

func (c counterDo) Find() ([]*model.Counter, error) {
	result, err := c.DO.Find()
	return result.([]*model.Counter), err
}

func (c counterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Counter, err error) {
	buf := make([]*model.Counter, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c counterDo) FindInBatches(result *[]*model.Counter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c counterDo) Attrs(attrs ...field.AssignExpr) ICounterDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c counterDo) Assign(attrs ...field.AssignExpr) ICounterDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c counterDo) Joins(fields ...field.RelationField) ICounterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c counterDo) Preload(fields ...field.RelationField) ICounterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c counterDo) FirstOrInit() (*model.Counter, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Counter), nil
	}
}

func (c counterDo) FirstOrCreate() (*model.Counter, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Counter), nil
	}
}

func (c counterDo) FindByPage(offset int, limit int) (result []*model.Counter, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c counterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c counterDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c counterDo) Delete(models ...*model.Counter) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *counterDo) withDO(do gen.Dao) *counterDo {
	c.DO = *do.(*gen.DO)
	return c
}
