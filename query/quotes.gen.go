// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"whisprite/model"
)

func newQuote(db *gorm.DB, opts ...gen.DOOption) quote {
	_quote := quote{}

	_quote.quoteDo.UseDB(db, opts...)
	_quote.quoteDo.UseModel(&model.Quote{})

	tableName := _quote.quoteDo.TableName()
	_quote.ALL = field.NewAsterisk(tableName)
	_quote.ID = field.NewUint(tableName, "id")
	_quote.CreatedAt = field.NewTime(tableName, "created_at")
	_quote.UpdatedAt = field.NewTime(tableName, "updated_at")
	_quote.DeletedAt = field.NewField(tableName, "deleted_at")
	_quote.Content = field.NewString(tableName, "content")
	_quote.AddedBy = field.NewString(tableName, "added_by")

	_quote.fillFieldMap()

	return _quote
}

type quote struct {
	quoteDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Content   field.String
	AddedBy   field.String

	fieldMap map[string]field.Expr
}

func (q quote) Table(newTableName string) *quote {
	q.quoteDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quote) As(alias string) *quote {
	q.quoteDo.DO = *(q.quoteDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quote) updateTableName(table string) *quote {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewUint(table, "id")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.DeletedAt = field.NewField(table, "deleted_at")
	q.Content = field.NewString(table, "content")
	q.AddedBy = field.NewString(table, "added_by")

	q.fillFieldMap()

	return q
}

func (q *quote) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quote) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["deleted_at"] = q.DeletedAt
	q.fieldMap["content"] = q.Content
	q.fieldMap["added_by"] = q.AddedBy
}

func (q quote) clone(db *gorm.DB) quote {
	q.quoteDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quote) replaceDB(db *gorm.DB) quote {
	q.quoteDo.ReplaceDB(db)
	return q
}

type quoteDo struct{ gen.DO }

type IQuoteDo interface {
	gen.SubQuery
	Debug() IQuoteDo
	WithContext(ctx context.Context) IQuoteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuoteDo
	WriteDB() IQuoteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuoteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuoteDo
	Not(conds ...gen.Condition) IQuoteDo
	Or(conds ...gen.Condition) IQuoteDo
	Select(conds ...field.Expr) IQuoteDo
	Where(conds ...gen.Condition) IQuoteDo
	Order(conds ...field.Expr) IQuoteDo
	Distinct(cols ...field.Expr) IQuoteDo
	Omit(cols ...field.Expr) IQuoteDo
	Join(table schema.Tabler, on ...field.Expr) IQuoteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuoteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuoteDo
	Group(cols ...field.Expr) IQuoteDo
	Having(conds ...gen.Condition) IQuoteDo
	Limit(limit int) IQuoteDo
	Offset(offset int) IQuoteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuoteDo
	Unscoped() IQuoteDo
	Create(values ...*model.Quote) error
	CreateInBatches(values []*model.Quote, batchSize int) error
	Save(values ...*model.Quote) error
	First() (*model.Quote, error)
	Take() (*model.Quote, error)
	Last() (*model.Quote, error)
	Find() ([]*model.Quote, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Quote, err error)
	FindInBatches(result *[]*model.Quote, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Quote) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuoteDo
	Assign(attrs ...field.AssignExpr) IQuoteDo
	Joins(fields ...field.RelationField) IQuoteDo
	Preload(fields ...field.RelationField) IQuoteDo
	FirstOrInit() (*model.Quote, error)
	FirstOrCreate() (*model.Quote, error)
	FindByPage(offset int, limit int) (result []*model.Quote, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuoteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q quoteDo) Debug() IQuoteDo {
	return q.withDO(q.DO.Debug())
}

func (q quoteDo) WithContext(ctx context.Context) IQuoteDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quoteDo) ReadDB() IQuoteDo {
	return q.Clauses(dbresolver.Read)
}

func (q quoteDo) WriteDB() IQuoteDo {
	return q.Clauses(dbresolver.Write)
}

func (q quoteDo) Session(config *gorm.Session) IQuoteDo {
	return q.withDO(q.DO.Session(config))
}

func (q quoteDo) Clauses(conds ...clause.Expression) IQuoteDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quoteDo) Returning(value interface{}, columns ...string) IQuoteDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quoteDo) Not(conds ...gen.Condition) IQuoteDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quoteDo) Or(conds ...gen.Condition) IQuoteDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quoteDo) Select(conds ...field.Expr) IQuoteDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quoteDo) Where(conds ...gen.Condition) IQuoteDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quoteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IQuoteDo {
	return q.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (q quoteDo) Order(conds ...field.Expr) IQuoteDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quoteDo) Distinct(cols ...field.Expr) IQuoteDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quoteDo) Omit(cols ...field.Expr) IQuoteDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quoteDo) Join(table schema.Tabler, on ...field.Expr) IQuoteDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quoteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuoteDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quoteDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuoteDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quoteDo) Group(cols ...field.Expr) IQuoteDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quoteDo) Having(conds ...gen.Condition) IQuoteDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quoteDo) Limit(limit int) IQuoteDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quoteDo) Offset(offset int) IQuoteDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quoteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuoteDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quoteDo) Unscoped() IQuoteDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quoteDo) Create(values ...*model.Quote) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quoteDo) CreateInBatches(values []*model.Quote, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quoteDo) Save(values ...*model.Quote) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quoteDo) First() (*model.Quote, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quote), nil
	}
}

func (q quoteDo) Take() (*model.Quote, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quote), nil
	}
}

func (q quoteDo) Last() (*model.Quote, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quote), nil
	}
}

func (q quoteDo) Find() ([]*model.Quote, error) {
	result, err := q.DO.Find()
	return result.([]*model.Quote), err
}

func (q quoteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Quote, err error) {
	buf := make([]*model.Quote, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quoteDo) FindInBatches(result *[]*model.Quote, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quoteDo) Attrs(attrs ...field.AssignExpr) IQuoteDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quoteDo) Assign(attrs ...field.AssignExpr) IQuoteDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quoteDo) Joins(fields ...field.RelationField) IQuoteDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quoteDo) Preload(fields ...field.RelationField) IQuoteDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quoteDo) FirstOrInit() (*model.Quote, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quote), nil
	}
}

func (q quoteDo) FirstOrCreate() (*model.Quote, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quote), nil
	}
}

func (q quoteDo) FindByPage(offset int, limit int) (result []*model.Quote, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quoteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quoteDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quoteDo) Delete(models ...*model.Quote) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quoteDo) withDO(do gen.Dao) *quoteDo {
	q.DO = *do.(*gen.DO)
	return q
}
