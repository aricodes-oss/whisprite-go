// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	CommandAlias        *commandAlias
	Counter             *counter
	CounterContribution *counterContribution
	Quote               *quote
	User                *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CommandAlias = &Q.CommandAlias
	Counter = &Q.Counter
	CounterContribution = &Q.CounterContribution
	Quote = &Q.Quote
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		CommandAlias:        newCommandAlias(db, opts...),
		Counter:             newCounter(db, opts...),
		CounterContribution: newCounterContribution(db, opts...),
		Quote:               newQuote(db, opts...),
		User:                newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CommandAlias        commandAlias
	Counter             counter
	CounterContribution counterContribution
	Quote               quote
	User                user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		CommandAlias:        q.CommandAlias.clone(db),
		Counter:             q.Counter.clone(db),
		CounterContribution: q.CounterContribution.clone(db),
		Quote:               q.Quote.clone(db),
		User:                q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		CommandAlias:        q.CommandAlias.replaceDB(db),
		Counter:             q.Counter.replaceDB(db),
		CounterContribution: q.CounterContribution.replaceDB(db),
		Quote:               q.Quote.replaceDB(db),
		User:                q.User.replaceDB(db),
	}
}

type queryCtx struct {
	CommandAlias        ICommandAliasDo
	Counter             ICounterDo
	CounterContribution ICounterContributionDo
	Quote               IQuoteDo
	User                IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CommandAlias:        q.CommandAlias.WithContext(ctx),
		Counter:             q.Counter.WithContext(ctx),
		CounterContribution: q.CounterContribution.WithContext(ctx),
		Quote:               q.Quote.WithContext(ctx),
		User:                q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
