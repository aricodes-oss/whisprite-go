// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"whisprite/model"
)

func newCounterContribution(db *gorm.DB, opts ...gen.DOOption) counterContribution {
	_counterContribution := counterContribution{}

	_counterContribution.counterContributionDo.UseDB(db, opts...)
	_counterContribution.counterContributionDo.UseModel(&model.CounterContribution{})

	tableName := _counterContribution.counterContributionDo.TableName()
	_counterContribution.ALL = field.NewAsterisk(tableName)
	_counterContribution.ID = field.NewUint(tableName, "id")
	_counterContribution.CreatedAt = field.NewTime(tableName, "created_at")
	_counterContribution.UpdatedAt = field.NewTime(tableName, "updated_at")
	_counterContribution.DeletedAt = field.NewField(tableName, "deleted_at")
	_counterContribution.CounterID = field.NewUint(tableName, "counter_id")
	_counterContribution.UserID = field.NewUint(tableName, "user_id")

	_counterContribution.fillFieldMap()

	return _counterContribution
}

type counterContribution struct {
	counterContributionDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	CounterID field.Uint
	UserID    field.Uint

	fieldMap map[string]field.Expr
}

func (c counterContribution) Table(newTableName string) *counterContribution {
	c.counterContributionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c counterContribution) As(alias string) *counterContribution {
	c.counterContributionDo.DO = *(c.counterContributionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *counterContribution) updateTableName(table string) *counterContribution {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CounterID = field.NewUint(table, "counter_id")
	c.UserID = field.NewUint(table, "user_id")

	c.fillFieldMap()

	return c
}

func (c *counterContribution) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *counterContribution) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["counter_id"] = c.CounterID
	c.fieldMap["user_id"] = c.UserID
}

func (c counterContribution) clone(db *gorm.DB) counterContribution {
	c.counterContributionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c counterContribution) replaceDB(db *gorm.DB) counterContribution {
	c.counterContributionDo.ReplaceDB(db)
	return c
}

type counterContributionDo struct{ gen.DO }

type ICounterContributionDo interface {
	gen.SubQuery
	Debug() ICounterContributionDo
	WithContext(ctx context.Context) ICounterContributionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICounterContributionDo
	WriteDB() ICounterContributionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICounterContributionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICounterContributionDo
	Not(conds ...gen.Condition) ICounterContributionDo
	Or(conds ...gen.Condition) ICounterContributionDo
	Select(conds ...field.Expr) ICounterContributionDo
	Where(conds ...gen.Condition) ICounterContributionDo
	Order(conds ...field.Expr) ICounterContributionDo
	Distinct(cols ...field.Expr) ICounterContributionDo
	Omit(cols ...field.Expr) ICounterContributionDo
	Join(table schema.Tabler, on ...field.Expr) ICounterContributionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICounterContributionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICounterContributionDo
	Group(cols ...field.Expr) ICounterContributionDo
	Having(conds ...gen.Condition) ICounterContributionDo
	Limit(limit int) ICounterContributionDo
	Offset(offset int) ICounterContributionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICounterContributionDo
	Unscoped() ICounterContributionDo
	Create(values ...*model.CounterContribution) error
	CreateInBatches(values []*model.CounterContribution, batchSize int) error
	Save(values ...*model.CounterContribution) error
	First() (*model.CounterContribution, error)
	Take() (*model.CounterContribution, error)
	Last() (*model.CounterContribution, error)
	Find() ([]*model.CounterContribution, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CounterContribution, err error)
	FindInBatches(result *[]*model.CounterContribution, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CounterContribution) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICounterContributionDo
	Assign(attrs ...field.AssignExpr) ICounterContributionDo
	Joins(fields ...field.RelationField) ICounterContributionDo
	Preload(fields ...field.RelationField) ICounterContributionDo
	FirstOrInit() (*model.CounterContribution, error)
	FirstOrCreate() (*model.CounterContribution, error)
	FindByPage(offset int, limit int) (result []*model.CounterContribution, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICounterContributionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c counterContributionDo) Debug() ICounterContributionDo {
	return c.withDO(c.DO.Debug())
}

func (c counterContributionDo) WithContext(ctx context.Context) ICounterContributionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c counterContributionDo) ReadDB() ICounterContributionDo {
	return c.Clauses(dbresolver.Read)
}

func (c counterContributionDo) WriteDB() ICounterContributionDo {
	return c.Clauses(dbresolver.Write)
}

func (c counterContributionDo) Session(config *gorm.Session) ICounterContributionDo {
	return c.withDO(c.DO.Session(config))
}

func (c counterContributionDo) Clauses(conds ...clause.Expression) ICounterContributionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c counterContributionDo) Returning(value interface{}, columns ...string) ICounterContributionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c counterContributionDo) Not(conds ...gen.Condition) ICounterContributionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c counterContributionDo) Or(conds ...gen.Condition) ICounterContributionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c counterContributionDo) Select(conds ...field.Expr) ICounterContributionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c counterContributionDo) Where(conds ...gen.Condition) ICounterContributionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c counterContributionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICounterContributionDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c counterContributionDo) Order(conds ...field.Expr) ICounterContributionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c counterContributionDo) Distinct(cols ...field.Expr) ICounterContributionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c counterContributionDo) Omit(cols ...field.Expr) ICounterContributionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c counterContributionDo) Join(table schema.Tabler, on ...field.Expr) ICounterContributionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c counterContributionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICounterContributionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c counterContributionDo) RightJoin(table schema.Tabler, on ...field.Expr) ICounterContributionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c counterContributionDo) Group(cols ...field.Expr) ICounterContributionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c counterContributionDo) Having(conds ...gen.Condition) ICounterContributionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c counterContributionDo) Limit(limit int) ICounterContributionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c counterContributionDo) Offset(offset int) ICounterContributionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c counterContributionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICounterContributionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c counterContributionDo) Unscoped() ICounterContributionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c counterContributionDo) Create(values ...*model.CounterContribution) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c counterContributionDo) CreateInBatches(values []*model.CounterContribution, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c counterContributionDo) Save(values ...*model.CounterContribution) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c counterContributionDo) First() (*model.CounterContribution, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CounterContribution), nil
	}
}

func (c counterContributionDo) Take() (*model.CounterContribution, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CounterContribution), nil
	}
}

func (c counterContributionDo) Last() (*model.CounterContribution, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CounterContribution), nil
	}
}

func (c counterContributionDo) Find() ([]*model.CounterContribution, error) {
	result, err := c.DO.Find()
	return result.([]*model.CounterContribution), err
}

func (c counterContributionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CounterContribution, err error) {
	buf := make([]*model.CounterContribution, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c counterContributionDo) FindInBatches(result *[]*model.CounterContribution, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c counterContributionDo) Attrs(attrs ...field.AssignExpr) ICounterContributionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c counterContributionDo) Assign(attrs ...field.AssignExpr) ICounterContributionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c counterContributionDo) Joins(fields ...field.RelationField) ICounterContributionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c counterContributionDo) Preload(fields ...field.RelationField) ICounterContributionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c counterContributionDo) FirstOrInit() (*model.CounterContribution, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CounterContribution), nil
	}
}

func (c counterContributionDo) FirstOrCreate() (*model.CounterContribution, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CounterContribution), nil
	}
}

func (c counterContributionDo) FindByPage(offset int, limit int) (result []*model.CounterContribution, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c counterContributionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c counterContributionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c counterContributionDo) Delete(models ...*model.CounterContribution) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *counterContributionDo) withDO(do gen.Dao) *counterContributionDo {
	c.DO = *do.(*gen.DO)
	return c
}
