// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"whisprite/model"
)

func newCommandAlias(db *gorm.DB, opts ...gen.DOOption) commandAlias {
	_commandAlias := commandAlias{}

	_commandAlias.commandAliasDo.UseDB(db, opts...)
	_commandAlias.commandAliasDo.UseModel(&model.CommandAlias{})

	tableName := _commandAlias.commandAliasDo.TableName()
	_commandAlias.ALL = field.NewAsterisk(tableName)
	_commandAlias.ID = field.NewUint(tableName, "id")
	_commandAlias.CreatedAt = field.NewTime(tableName, "created_at")
	_commandAlias.UpdatedAt = field.NewTime(tableName, "updated_at")
	_commandAlias.DeletedAt = field.NewField(tableName, "deleted_at")
	_commandAlias.Name = field.NewString(tableName, "name")
	_commandAlias.Target = field.NewString(tableName, "target")

	_commandAlias.fillFieldMap()

	return _commandAlias
}

type commandAlias struct {
	commandAliasDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Target    field.String

	fieldMap map[string]field.Expr
}

func (c commandAlias) Table(newTableName string) *commandAlias {
	c.commandAliasDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commandAlias) As(alias string) *commandAlias {
	c.commandAliasDo.DO = *(c.commandAliasDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commandAlias) updateTableName(table string) *commandAlias {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Name = field.NewString(table, "name")
	c.Target = field.NewString(table, "target")

	c.fillFieldMap()

	return c
}

func (c *commandAlias) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commandAlias) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["target"] = c.Target
}

func (c commandAlias) clone(db *gorm.DB) commandAlias {
	c.commandAliasDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commandAlias) replaceDB(db *gorm.DB) commandAlias {
	c.commandAliasDo.ReplaceDB(db)
	return c
}

type commandAliasDo struct{ gen.DO }

type ICommandAliasDo interface {
	gen.SubQuery
	Debug() ICommandAliasDo
	WithContext(ctx context.Context) ICommandAliasDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommandAliasDo
	WriteDB() ICommandAliasDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommandAliasDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommandAliasDo
	Not(conds ...gen.Condition) ICommandAliasDo
	Or(conds ...gen.Condition) ICommandAliasDo
	Select(conds ...field.Expr) ICommandAliasDo
	Where(conds ...gen.Condition) ICommandAliasDo
	Order(conds ...field.Expr) ICommandAliasDo
	Distinct(cols ...field.Expr) ICommandAliasDo
	Omit(cols ...field.Expr) ICommandAliasDo
	Join(table schema.Tabler, on ...field.Expr) ICommandAliasDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommandAliasDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommandAliasDo
	Group(cols ...field.Expr) ICommandAliasDo
	Having(conds ...gen.Condition) ICommandAliasDo
	Limit(limit int) ICommandAliasDo
	Offset(offset int) ICommandAliasDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommandAliasDo
	Unscoped() ICommandAliasDo
	Create(values ...*model.CommandAlias) error
	CreateInBatches(values []*model.CommandAlias, batchSize int) error
	Save(values ...*model.CommandAlias) error
	First() (*model.CommandAlias, error)
	Take() (*model.CommandAlias, error)
	Last() (*model.CommandAlias, error)
	Find() ([]*model.CommandAlias, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommandAlias, err error)
	FindInBatches(result *[]*model.CommandAlias, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommandAlias) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommandAliasDo
	Assign(attrs ...field.AssignExpr) ICommandAliasDo
	Joins(fields ...field.RelationField) ICommandAliasDo
	Preload(fields ...field.RelationField) ICommandAliasDo
	FirstOrInit() (*model.CommandAlias, error)
	FirstOrCreate() (*model.CommandAlias, error)
	FindByPage(offset int, limit int) (result []*model.CommandAlias, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommandAliasDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c commandAliasDo) Debug() ICommandAliasDo {
	return c.withDO(c.DO.Debug())
}

func (c commandAliasDo) WithContext(ctx context.Context) ICommandAliasDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commandAliasDo) ReadDB() ICommandAliasDo {
	return c.Clauses(dbresolver.Read)
}

func (c commandAliasDo) WriteDB() ICommandAliasDo {
	return c.Clauses(dbresolver.Write)
}

func (c commandAliasDo) Session(config *gorm.Session) ICommandAliasDo {
	return c.withDO(c.DO.Session(config))
}

func (c commandAliasDo) Clauses(conds ...clause.Expression) ICommandAliasDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commandAliasDo) Returning(value interface{}, columns ...string) ICommandAliasDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commandAliasDo) Not(conds ...gen.Condition) ICommandAliasDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commandAliasDo) Or(conds ...gen.Condition) ICommandAliasDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commandAliasDo) Select(conds ...field.Expr) ICommandAliasDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commandAliasDo) Where(conds ...gen.Condition) ICommandAliasDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commandAliasDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICommandAliasDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c commandAliasDo) Order(conds ...field.Expr) ICommandAliasDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commandAliasDo) Distinct(cols ...field.Expr) ICommandAliasDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commandAliasDo) Omit(cols ...field.Expr) ICommandAliasDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commandAliasDo) Join(table schema.Tabler, on ...field.Expr) ICommandAliasDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commandAliasDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommandAliasDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commandAliasDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommandAliasDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commandAliasDo) Group(cols ...field.Expr) ICommandAliasDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commandAliasDo) Having(conds ...gen.Condition) ICommandAliasDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commandAliasDo) Limit(limit int) ICommandAliasDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commandAliasDo) Offset(offset int) ICommandAliasDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commandAliasDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommandAliasDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commandAliasDo) Unscoped() ICommandAliasDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commandAliasDo) Create(values ...*model.CommandAlias) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commandAliasDo) CreateInBatches(values []*model.CommandAlias, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commandAliasDo) Save(values ...*model.CommandAlias) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commandAliasDo) First() (*model.CommandAlias, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommandAlias), nil
	}
}

func (c commandAliasDo) Take() (*model.CommandAlias, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommandAlias), nil
	}
}

func (c commandAliasDo) Last() (*model.CommandAlias, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommandAlias), nil
	}
}

func (c commandAliasDo) Find() ([]*model.CommandAlias, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommandAlias), err
}

func (c commandAliasDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommandAlias, err error) {
	buf := make([]*model.CommandAlias, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commandAliasDo) FindInBatches(result *[]*model.CommandAlias, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commandAliasDo) Attrs(attrs ...field.AssignExpr) ICommandAliasDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commandAliasDo) Assign(attrs ...field.AssignExpr) ICommandAliasDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commandAliasDo) Joins(fields ...field.RelationField) ICommandAliasDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commandAliasDo) Preload(fields ...field.RelationField) ICommandAliasDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commandAliasDo) FirstOrInit() (*model.CommandAlias, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommandAlias), nil
	}
}

func (c commandAliasDo) FirstOrCreate() (*model.CommandAlias, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommandAlias), nil
	}
}

func (c commandAliasDo) FindByPage(offset int, limit int) (result []*model.CommandAlias, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commandAliasDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commandAliasDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commandAliasDo) Delete(models ...*model.CommandAlias) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commandAliasDo) withDO(do gen.Dao) *commandAliasDo {
	c.DO = *do.(*gen.DO)
	return c
}
